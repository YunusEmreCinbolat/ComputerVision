# -*- coding: utf-8 -*-
"""skimage_tutorial.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n9Dh0ccCIZLzTX-JYe2eOtv2ZFvft5YZ
"""

# Commented out IPython magic to ensure Python compatibility.
# %pylab inline

from skimage import data
from skimage import io

"""# Playing with colors

"""

from skimage import color

"""Let's load some sample images."""

astronaut = data.astronaut()
io.imshow(astronaut)
io.show()

astronaut_gray = color.rgb2gray(astronaut)
io.imshow(astronaut_gray)

"""# Gradients"""

import numpy as np
from skimage.filters.rank import gradient

grad_y = np.diff(astronaut_gray, axis=0)
io.imshow(grad_y, cmap='gray')

grad_x = np.diff(astronaut_gray, axis=1)
io.imshow(grad_x, cmap='gray')

"""**Note: across the dimention of the gradient the size of the gradient image is the size of original - 1**

# [Filters](http://scikit-image.org/docs/0.10.x/api/skimage.filter.html)
"""

from skimage import filters

"""## Gaussian"""

filtered = filters.gaussian(astronaut, sigma=3, multichannel=True)
io.imshow(filtered)

"""We can specify different sigma for x and y:"""

filtered = filters.gaussian(astronaut, sigma=[1, 10], multichannel=True)
io.imshow(filtered)

filtered.shape == astronaut.shape

"""## Sobel"""

text = data.text()
io.imshow(text)

edges = filters.sobel(text)
io.imshow(edges)

"""## Canny

"""

io.imshow(astronaut_gray)

from skimage import feature

edges = feature.canny(astronaut_gray)
io.imshow(edges)

"""Let's set some parameters for the blur and thresholding."""

edges = feature.canny(astronaut_gray, sigma=2)
io.imshow(edges)

edges = feature.canny(astronaut_gray, sigma=1, low_threshold=0.2, high_threshold=0.5)
io.imshow(edges)

"""# [Features](http://scikit-image.org/docs/0.10.x/api/skimage.feature.html)

"""

from skimage.feature import corner_harris, peak_local_max, corner_peaks

"""## Harris corner detector

Compute the corner measure based on the autocorrelation matrix.
"""

image = color.rgb2gray(data.text())
corners = corner_harris(image)
io.imshow(corners, cmap='gray')

"""Now let's pick the actual corners: here we simply find the miximum peaks."""

coords = peak_local_max(corners)
io.imshow(image, cmap='gray')
plt.plot(coords[:, 1], coords[:, 0], '+r', markersize=10)
plt.show()

"""Set blur intensity and distance between the peaks."""

coords = peak_local_max(corner_harris(image, sigma=5), min_distance=10)
io.imshow(image, cmap='gray')
plt.plot(coords[:, 1], coords[:, 0], '+r', markersize=10)
plt.show()

"""A fancier corner selection technique: suppresses multiple connected peaks with `corner_peaks`.

# Template matching
"""

from skimage.feature import match_template

image = data.coins()
io.imshow(image)

"""Let's pick a coin to localize: the one in row 3, column 2."""

coin = image[170:220, 75:130]
io.imshow(coin)

match = match_template(image, coin)
io.imshow(match)

import numpy as np
import matplotlib.pyplot as plt

from skimage import data
from skimage.feature import match_template


image = data.coins()
coin = image[170:220, 75:130]

result = match_template(image, coin)
ij = np.unravel_index(np.argmax(result), result.shape)
x, y = ij[::-1]

fig, (ax1, ax2, ax3) = plt.subplots(ncols=3, figsize=(8, 3))

ax1.imshow(coin, cmap='gray')
ax1.set_axis_off()
ax1.set_title('template')

ax2.imshow(image, cmap='gray')
ax2.set_axis_off()
ax2.set_title('image')
# highlight matched region
hcoin, wcoin = coin.shape
rect = plt.Rectangle((x, y), wcoin, hcoin, edgecolor='r', facecolor='none')
ax2.add_patch(rect)

ax3.imshow(result)
ax3.set_axis_off()
ax3.set_title('`match_template`\nresult')
# highlight matched region
ax3.autoscale(False)
ax3.plot(x, y, 'o', markeredgecolor='r', markerfacecolor='none', markersize=10)

plt.show()

